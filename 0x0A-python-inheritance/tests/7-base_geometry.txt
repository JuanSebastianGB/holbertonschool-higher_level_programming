# 7-base_geometry.txt

========================================
UNIT TEST FOR MODULE 7-base_geometry.py
========================================

In this module is implemented a class 'BaseGeometry'

======
IMPORT
======

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

# Giving arguments to the class
    >>> ob = BaseGeometry(None)
    Traceback (most recent call last):
    TypeError: BaseGeometry() takes no arguments


# Checking for area failure
    >>> ob = BaseGeometry()
    >>> ob.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

# Printing ob
    >>> print(ob) # doctest: +ELLIPSIS
    <7-base_geometry.BaseGeometry object at ...>

# Printing ob type
    >>> print(type(ob))
    <class '7-base_geometry.BaseGeometry'>

# Printing ob.area
    >>> print(ob.area) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
    <bound method BaseGeometry.area of <7-base_geometry.BaseGeometry object at ...>>

# Checking a lot arguments
    >>> ob.area(20)
    Traceback (most recent call last):
    TypeError: area() takes 1 positional argument but 2 were given

# integer is 0
    >>> ob.integer_validator("integer", 0)
    Traceback (most recent call last):
    ValueError: integer must be greater than 0

# integer is < 0
    >>> ob.integer_validator("integer", -1)
    Traceback (most recent call last):
    ValueError: integer must be greater than 0

# integer positive    
    >>> ob.integer_validator("integer", 1)

# Not integer boolean
    >>> ob.integer_validator("bool", True)
    Traceback (most recent call last):
    TypeError: bool must be an integer

# Not integer tuple
    >>> ob.integer_validator("tuple", (1, 5))
    Traceback (most recent call last):
    TypeError: tuple must be an integer

# Not integer list
    >>> ob.integer_validator("list", [30])
    Traceback (most recent call last):
    TypeError: list must be an integer

# Not integer dictionary
    >>> ob.integer_validator("dictionary", {3, 5})
    Traceback (most recent call last):
    TypeError: dictionary must be an integer

# Not integer None
    >>> ob.integer_validator("None", None)
    Traceback (most recent call last):
    TypeError: None must be an integer

# Not arguments
    >>> ob.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

# None argument
    >>> ob.integer_validator(None)
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

# unexepected argument    
    >>> ob.integer_validator({"weird": "5"}, [5]) 
    Traceback (most recent call last):
    TypeError: {'weird': '5'} must be an integer

# 3 arguments
    >>> ob.integer_validator("integer", 10, 5)
    Traceback (most recent call last):
    TypeError: integer_validator() takes 3 positional arguments but 4 were given
